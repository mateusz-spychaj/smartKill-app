//
// DO NOT EDIT THIS FILE, IT HAS BEEN GENERATED USING AndroidAnnotations.
//


package pl.pwr.smartkill.activities;

import java.io.Serializable;
import android.content.Context;
import android.content.Intent;
import android.os.Bundle;
import android.os.Handler;
import android.util.Log;
import android.view.KeyEvent;
import android.view.View;
import android.view.ViewGroup.LayoutParams;
import com.googlecode.androidannotations.api.BackgroundExecutor;
import com.googlecode.androidannotations.api.SdkVersionHelper;
import pl.pwr.smartkill.SKApplication;
import pl.pwr.smartkill.obj.Match;
import pl.pwr.smartkill.obj.Positions;

public final class MapsActivity_
    extends MapsActivity
{

    private Handler handler_ = new Handler();

    @Override
    public void onCreate(Bundle savedInstanceState) {
        init_(savedInstanceState);
        super.onCreate(savedInstanceState);
    }

    private void init_(Bundle savedInstanceState) {
        injectExtras_();
        app = ((SKApplication) this.getApplication());
    }

    private void afterSetContentView_() {
        prepare();
    }

    @Override
    public void setContentView(int layoutResID) {
        super.setContentView(layoutResID);
        afterSetContentView_();
    }

    @Override
    public void setContentView(View view, LayoutParams params) {
        super.setContentView(view, params);
        afterSetContentView_();
    }

    @Override
    public void setContentView(View view) {
        super.setContentView(view);
        afterSetContentView_();
    }

    @Override
    public boolean onKeyDown(int keyCode, KeyEvent event) {
        if (((SdkVersionHelper.getSdkInt()< 5)&&(keyCode == KeyEvent.KEYCODE_BACK))&&(event.getRepeatCount() == 0)) {
            onBackPressed();
        }
        return super.onKeyDown(keyCode, event);
    }

    public static MapsActivity_.IntentBuilder_ intent(Context context) {
        return new MapsActivity_.IntentBuilder_(context);
    }

    @SuppressWarnings("unchecked")
    private<T >T cast_(Object object) {
        return ((T) object);
    }

    private void injectExtras_() {
        Intent intent_ = getIntent();
        Bundle extras_ = intent_.getExtras();
        if (extras_!= null) {
            if (extras_.containsKey("match")) {
                try {
                    match = cast_(extras_.get("match"));
                } catch (ClassCastException e) {
                    Log.e("MapsActivity_", "Could not cast extra to expected type, the field is left to its default value", e);
                }
            }
        }
    }

    @Override
    public void setIntent(Intent newIntent) {
        super.setIntent(newIntent);
        injectExtras_();
    }

    @Override
    public void changeOverlay(final String name) {
        handler_.post(new Runnable() {


            @Override
            public void run() {
                try {
                    MapsActivity_.super.changeOverlay(name);
                } catch (RuntimeException e) {
                    Log.e("MapsActivity_", "A runtime exception was thrown while executing code in a runnable", e);
                }
            }

        }
        );
    }

    @Override
    public void showKilled(final String name, final boolean own) {
        handler_.post(new Runnable() {


            @Override
            public void run() {
                try {
                    MapsActivity_.super.showKilled(name, own);
                } catch (RuntimeException e) {
                    Log.e("MapsActivity_", "A runtime exception was thrown while executing code in a runnable", e);
                }
            }

        }
        );
    }

    @Override
    public void getData() {
        BackgroundExecutor.execute(new Runnable() {


            @Override
            public void run() {
                try {
                    MapsActivity_.super.getData();
                } catch (RuntimeException e) {
                    Log.e("MapsActivity_", "A runtime exception was thrown while executing code in a runnable", e);
                }
            }

        }
        );
    }

    @Override
    public void updateData(final Positions m) {
        BackgroundExecutor.execute(new Runnable() {


            @Override
            public void run() {
                try {
                    MapsActivity_.super.updateData(m);
                } catch (RuntimeException e) {
                    Log.e("MapsActivity_", "A runtime exception was thrown while executing code in a runnable", e);
                }
            }

        }
        );
    }

    public static class IntentBuilder_ {

        private Context context_;
        private final Intent intent_;

        public IntentBuilder_(Context context) {
            context_ = context;
            intent_ = new Intent(context, MapsActivity_.class);
        }

        public Intent get() {
            return intent_;
        }

        public MapsActivity_.IntentBuilder_ flags(int flags) {
            intent_.setFlags(flags);
            return this;
        }

        public void start() {
            context_.startActivity(intent_);
        }

        public MapsActivity_.IntentBuilder_ match(Match match) {
            intent_.putExtra("match", ((Serializable) match));
            return this;
        }

    }

}
